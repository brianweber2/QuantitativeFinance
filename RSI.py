# Import required libraries
import numpy as np
import pandas as pd
import datetime as datetime


def rsi(security_symbol, overbought=70, oversold=30, start='2015-Jan-01', end='2016-Jan-01', window_length=14):
    """
    The Relative Strength Index (RSI) is a momentum oscillator.
    It oscillates between 0 and 100.
    It is considered overbought/oversold when it's over 70/below 30.
    Some traders use 80/20 to be on the safe side.
    RSI becomes more accurate as the calculation period (min_periods)
    increases.
    This can be lowered to increase sensitivity or raised to decrease
    sensitivity.
    10-day RSI is more likely to reach overbought or oversold levels than
    20-day RSI. The look-back parameters also depend on a security's
    volatility.
    Like many momentum oscillators, overbought and oversold readings for RSI
    work best when prices move sideways within a range.
    You can also look for divergence with price.
    If the price has new highs/lows, and the RSI hasn't, expect a reversal.
    Signals can also be generated by looking for failure swings and centerline
    crossovers.
    RSI can also be used to identify the general trend.
    The RSI was developed by J. Welles Wilder and was first introduced in his
    article in the June, 1978 issue of Commodities magazine, now known as
    Futures magazine. It is detailed in his book New Concepts In Technical
    Trading Systems.
    http://www.csidata.com/?page_id=797
    http://stockcharts.com/help/doku.php?id=chart_school:technical_indicators:relative_strength_in
    """
    
    # Convert date strings to datetime objects
    fmt = '%Y-%b-%d'
    start = datetime.datetime.strptime(start, fmt)
    end = datetime.datetime.strptime(end, fmt)
    
    # Get data
    stock_data = get_pricing(security_symbol, start_date=start, end_date=end, frequency='daily')
    stock_close = stock_data['close_price']
    
    stock_close_length = len(stock_close)
    
    if stock_close_length < window_length:
        # Show error message
        raise SystemExit('Error: length of stock price data is less than window_length')
    
    # Calculate gains and losses
    gains_losses = stock_close.values[1:] - stock_close.values[:-1]

    rsi_range = stock_close_length - window_length

    rsis = np.zeros(rsi_range)

    gains = np.array(gains_losses)
    # Assign 0 to all negative values
    masked_gains = gains < 0
    gains[masked_gains] = 0

    losses = np.array(gains_losses)
    # Assign 0 to all positive values
    masked_losses = losses > 0
    losses[masked_losses] = 0

    # Convert all negatives into positives
    losses *= -1
    
    avg_gain = np.mean(gains[:window_length])
    avg_loss = np.mean(losses[:window_length])
    
    if avg_loss == 0:
        rsis[0] = 100
    else:
        rs = avg_gain / avg_loss
        rsis[0] = 100 - (100 / (1 + rs))

    for idx in range(1, rsi_range):
        avg_gain = ((avg_gain * (window_length - 1) + gains[idx + (window_length - 1)]) / window_length)
        avg_loss = ((avg_loss * (window_length - 1) + losses[idx + (window_length - 1)]) / window_length)

        if avg_loss == 0:
            rsis[idx] = 100
        else:
            rs = avg_gain / avg_loss
            rsis[idx] = 100 - (100 / (1 + rs))
    
    return rsis